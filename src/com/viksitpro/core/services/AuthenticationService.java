/**
 * 
 */
package com.viksitpro.core.services;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.mail.internet.AddressException;

import org.apache.commons.lang3.RandomStringUtils;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.viksitpro.core.dao.entities.IstarUser;
import com.viksitpro.core.dao.entities.Login;
import com.viksitpro.core.dao.entities.LoginDAO;
import com.viksitpro.core.dao.entities.Role;
import com.viksitpro.core.dao.utils.user.IstarUserServices;
import com.viksitpro.core.exceptions.CustomException;
import com.viksitpro.core.utilities.ConstantURLs;
import com.viksitpro.core.utilities.CustomExceptionCodes;
import com.viksitpro.core.utilities.EmailUtils;
import com.viksitpro.core.utilities.ResponseObject;
import com.viksitpro.core.utilities.SMSTemplates;
import com.viksitpro.core.utilities.SMSUtils;

/**
 * @author ComplexObject
 *
 */
public class AuthenticationService {
	
	
	public void changePassword(String emailOrMobile )
	{
		IstarUserServices userService = new IstarUserServices();
		IstarUser user = null;
		if(emailOrMobile.matches("[0-9]+") && emailOrMobile.length() ==10)
		{
			//user entered mobile number
			Integer mobile = Integer.parseInt(emailOrMobile);
			List<IstarUser> users = userService.getUserByMobile(mobile);
			if(users.size()>0)
			{
				user = users.get(0);
			}
			else
			{
				String message = "Unable to find IstarUser in database with mobile { "+ mobile +" }";
				String code = CustomExceptionCodes.RESOURCE_NOT_FOUND;
				String error = message;
				throw new CustomException(message, code, error);
			}	
				
		}
		else
		{
			//user entered email id
			String email = emailOrMobile;
			List<IstarUser> users = userService.getUserWithEmail(email);
			if(users.size()>0)
			{
				user = users.get(0);
			}
			else
			{
				String message = "Unable to find IstarUser in database with email { "+ email +" }";
				String code = CustomExceptionCodes.RESOURCE_NOT_FOUND;
				String error = message;
				throw new CustomException(message, code, error);
			}
				
		}
		if(user!=null)
		{
			String hash = updateAuthenticationCode(user);
			sendEmail(user, hash);
			if(user.getMobile()!=null)
			{
				sendResetPwdSMSCode(user, hash);
			}
		}
	}
	
	/**
	 * @param user IstarUser instance
	 * @param hash String value of hash
	 */
	private void sendResetPwdSMSCode(IstarUser user, String hash) {
		
		SMSUtils smsUtils  = new SMSUtils();
		String message = SMSTemplates.RESET_PWD_TEMPLATE+hash;
		smsUtils.sendSMS(user.getMobile()+"", message);
		
	}

	/**
	 * @param user IstarUser instance
	 * @param hash String value of hash
	 */
	private void sendEmail(IstarUser user, String hash) {
		
		String link = ConstantURLs.RESET_PASSWORD_URL+"?scope=resetPassword&userId="+user.getId()+"&hash="+hash+"&auth_code="+UUID.randomUUID();
		
		  StringBuilder bodyText = new StringBuilder(); 
			bodyText.append("<div>")
			     .append("  Dear User<br/><br/>")
			     .append("  We got your reset password request, Find below link to reset password <br/>")
			     .append("  Verification code to reset Password is <b>"+hash+"</b> <br/>")
			     .append("  Please click <a href=\""+link+"\">here</a> or open below link in browser<br/>")
			     .append("  <a href=\""+link+"\">"+link+"</a>")
			     .append("  <br/><br/>")
			     .append("  Thanks,<br/>")
			     .append("  Talentify Team")
			     .append("</div>");
			
		String subject ="Reset Password";
		String message = bodyText.toString();
		
			try {
				EmailUtils.sendEmail( user.getEmail(),subject , message);
			} catch (javax.mail.MessagingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
	}

	/**
	 * @param user
	 */
	private String  updateAuthenticationCode(IstarUser user) {
		IstarUserServices userService = new IstarUserServices();
		String hash = new RandomStringUtils().randomAlphanumeric(6);
		user.setAuthToken(hash);		
		userService.updateIstarUserToDAO(user);
		return hash;
		
	}

	/**
	 * This method will be called at the time of logout.
	 * Its sole purpose is to make entry in Login Log Table. 
	 * @param istarUserId : Integer id of user.
	 * @param jsessionId : Jsessionid generated by Servlet container.
	 */
	public void logout (Integer istarUserId, String jsessionId)
	{
		AddLoggerEntry(istarUserId, jsessionId,"LOGOUT");
	}
	
	
	
	/**
	 * This method is called at the time of login and logout to make an entry in Login Table. 
	 * 
	 * @param istarUserId Integer Id of IstarUser.
	 * @param jSessionId Jsessionid generated by Servlet container. 
	 * @param Action String value of LOGIN/LOGOUT.
	 * 
	 * @return This method returns nothing. 
	 */	
	public void AddLoggerEntry(Integer istarUserId, String jsessionId, String action)  
	{
		Login loginEntry = new Login();
		loginEntry.setAction(action);
		loginEntry.setCreatedAt(new Timestamp(System.currentTimeMillis()));
		loginEntry.setJsessionId(jsessionId);
		loginEntry.setUserId(istarUserId);
		
		LoginDAO dao = new LoginDAO();
		Session loginSession = dao.getSession();
		Transaction taskTransaction = null;
		try {
			taskTransaction = loginSession.beginTransaction();
			loginSession.save(loginEntry);
			taskTransaction.commit();
		} catch (HibernateException e) {
			e.printStackTrace();
			if (taskTransaction != null)
				taskTransaction.rollback();
			e.printStackTrace();
		} finally {
			loginSession.close();
		}
	}
	

	/**
	 * This method can be used to authenticate a user by its email and password only.
	 * This method returns the Response Object with field statusCode, message 
	 * and List of Roles(in case of successful authentication).    
	 * 
	 * @param email  Valid Email of IstarUser
	 * @param password Non Empty Password of IstarUser
	 * @return  Response Object 
	 * 
	 */
	public ResponseObject LoginWithEmailAndPasswordOnly(String email, String password, String jsessionId) 
	{
		//ViksitLogger.logMSG(this.getClass().getName(),"passwrdo"+password);
		ResponseObject result = new ResponseObject();
		IstarUserServices userService = new IstarUserServices(); 
		List<IstarUser> userWithGivenEmail = userService.getUserWithEmail(email);
		if(userWithGivenEmail.size()==0)
		{
			result.setMessage("No user exists with email {"+email+"}");
			result.setStatusCode(CustomExceptionCodes.RESOURCE_NOT_FOUND);
			result.setResult(new ArrayList<Role>());
		}
		else
		{
			boolean passwordCorrect= false;
			for(IstarUser user : userWithGivenEmail)
			{
				if(user.getPassword().equalsIgnoreCase(password))
				{
					passwordCorrect= true;
					result.setMessage("User Logged in Successfully");
					result.setStatusCode(CustomExceptionCodes.SUCCESS);					
					List<Role>  roles = userService.getRolesOfUser(user);
					result.setResult(roles);
					AddLoggerEntry(user.getId(), jsessionId, "LOGIN");
					break;
				}
			}
			
			if(!passwordCorrect)
			{
				result.setMessage("Password provided is incorrect for email {"+email+"}");
				result.setStatusCode(CustomExceptionCodes.INCORRECT_CREDENTIALS);
				result.setResult(new ArrayList<Role>());
			}
		}
		
		return result;
	}
	
	/**
	 * This method will take input as email and password.
	 * On validation of email and password, method will iterate through all the user roles
	 * and return highest priority role matching with the input Role String provided.      
	 * @param email Email id of IstarUser
	 * @param password Password of IstarUser
	 * @param roles comma separated roles  
	 * @return returns response object with statusCode, message and Highest Priority Role of IstarUser(in case of success).
	 */
	public ResponseObject LoginWithEmailPwdAndRoles(String email, String password, String roleString, String jsessionId)
	{
		ResponseObject result = new ResponseObject();
		IstarUserServices userService = new IstarUserServices();
		List<IstarUser> userWithGivenEmail = userService.getUserWithEmail(email);
		if(userWithGivenEmail.size()==0)
		{
			result.setMessage("No user exists with email {"+email+"}");
			result.setStatusCode(CustomExceptionCodes.RESOURCE_NOT_FOUND);
			result.setResult(new ArrayList<Role>());
		}
		else
		{
			boolean passwordCorrect= false;
			for(IstarUser user : userWithGivenEmail)
			{
				if(user.getPassword().equalsIgnoreCase(password))
				{
					passwordCorrect= true;
					List<Role>  roles = userService.getRolesOfUser(user);
					//got list of roles user is having
					//will iterate all the roles and return highest priority role that will match with roleString passed in parameter.  
					boolean roleMatchFound= false;
					for(int i =0; i< roles.size();i++)
					{
						Role currentRole = roles.get(i);
						if(roleString.contains(currentRole.getRoleName()))
						{
							roleMatchFound= true;
							result.setMessage("User Logged in Successfully");
							result.setStatusCode(CustomExceptionCodes.SUCCESS);									
							result.setResult(currentRole);
							
							AddLoggerEntry(user.getId(), jsessionId, "LOGIN");
							
							break;
						}
					}
					
					if(!roleMatchFound)
					{
						result.setMessage("No Roles defined for the User with email {"+email+"}");
						result.setStatusCode(CustomExceptionCodes.RESOURCE_NOT_FOUND);
						result.setResult(new Role());
					}
					
					break;
				}
			}
			
			if(!passwordCorrect)
			{
				result.setMessage("Password provided is incorrect for email {"+email+"}");
				result.setStatusCode(CustomExceptionCodes.INCORRECT_CREDENTIALS);
				result.setResult(new ArrayList<Role>());
			}
		}
		
		return result;
	}

	/**
	 * @param userId
	 * @param hashCode
	 */
	public boolean verifyAuthCode(int userId, String hashCode) {
		IstarUserServices userService = new IstarUserServices();
		IstarUser user = userService.getIstarUser(userId);
		
		if(user.getAuthToken()!=null && user.getAuthToken().equalsIgnoreCase(hashCode))
		{
			return true;
		}
		return false;
		
	}

	/**
	 * @param userId
	 * @param newPassword
	 */
	public void ResetPassword(int userId, String newPassword) {
		IstarUserServices userService = new IstarUserServices();
		IstarUser user = userService.getIstarUser(userId);
		user.setAuthToken(null);
		user.setPassword(newPassword);
		userService.updateIstarUserToDAO(user);	
		
		StringBuilder bodyText = new StringBuilder(); 
		bodyText.append("<div>")
		     .append("  Dear "+user.getEmail()+"<br/><br/>")
		     .append("  Your password has been updated Successfully <br/>")
		     
		     .append("  <br/><br/>")
		     .append("  Thanks,<br/>")
		     .append("  Talentify Team")
		     .append("</div>");
		
		String subject ="Password Updated Successfully";
		String message = bodyText.toString();
	
			try {
				EmailUtils.sendEmail( user.getEmail(),subject , message);
			} catch (AddressException e) {
				e.printStackTrace();
			} catch (javax.mail.MessagingException e) {
				e.printStackTrace();
			}
	}
}
